import{k as o,r as i}from"./index-CxzMjhE-.js";import{n as k}from"./quest-3nETprwz.js";const E=async t=>(await o.post("/git/sync",{questId:t})).data,R=async(t,s,a)=>(await o.get(`/git/diff/${t}`,{params:{filePath:s,commitId:a}})).data,x=async t=>{const s=await o.get(`/git/files/${t}`),{files:a,folders:r}=s.data;return[...a.map(e=>({name:e.split("/").pop()||e,path:e,type:"file"})),...r.map(e=>({name:e.split("/").pop()||e,path:e,type:"folder"}))]},$=async t=>(await o.get(`/git/commits/${t}`)).data,b=async(t,s)=>(await o.post("/git/folders",{questId:t,folderPath:s})).data,C=async(t,s,a)=>(await o.post("/git/files",{questId:t,filePath:s,content:a})).data,D=async(t,s,a)=>(await o.put("/git/files",{questId:t,filePath:s,content:a})).data,N=()=>{const[t,s]=i.useState([]),[a,r]=i.useState([]),[e,p]=i.useState(!1),[m,d]=i.useState(null),y=i.useCallback(async h=>{var l,u;p(!0),d(null);try{const{nodes:n,edges:w}=await k(h),f=(n||[]).filter(c=>c.type==="task"),g=new Set(f.map(c=>c.id)),G=(w||[]).filter(c=>g.has(c.from)&&g.has(c.to));s(f),r(G)}catch(n){console.error("[useGraph] Failed to load quest map:",n),d(((u=(l=n==null?void 0:n.response)==null?void 0:l.data)==null?void 0:u.error)||"Failed to load graph data.")}finally{p(!1)}},[]);return{nodes:t,edges:a,loading:e,error:m,loadGraph:y}};export{$ as a,R as b,b as c,D as d,C as e,x as f,E as s,N as u};

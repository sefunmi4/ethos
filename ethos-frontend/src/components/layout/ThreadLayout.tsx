import React, { useState, useRef, useEffect } from 'react';
import ContributionCard from '../contribution/ContributionCard';
import type { Post } from '../../types/postTypes';
import type { User } from '../../types/userTypes';
import { Spinner } from '../ui';

interface ThreadLayoutProps {
  contributions: Post[];
  parentId?: string | null;
  user?: User;
  onEdit?: (id: string) => void;
  onDelete?: (id: string) => void;
  depth?: number;
  maxDepth?: number;
  questId?: string;
  /** Expand all posts by default */
  initialExpanded?: boolean;
  onScrollEnd?: () => void;
  loadingMore?: boolean;
}

/**
 * Renders a threaded layout of contributions like messages, logs, or replies.
 * Posts are visually centered left, right, or middle based on author, collaborators, or system.
 * Clicking a post reveals its nested reply thread (lazy loaded on expand).
 */
const ThreadLayout: React.FC<ThreadLayoutProps> = ({
  contributions = [],
  parentId = null,
  user,
  onEdit,
  onDelete,
  depth = 0,
  maxDepth = 10,
  questId,
  loadingMore = false,
  initialExpanded = false
}) => {
  const childItems = contributions.filter(
    (item) => item.replyTo === parentId || item.repostedFrom?.originalPostId === parentId
  );

  const [expandedPosts, setExpandedPosts] = useState<Record<string, boolean>>(() => {
    if (!initialExpanded) return {};
    const all: Record<string, boolean> = {};
    childItems.forEach((it) => {
      all[it.id] = true;
    });
    return all;
  });

  const toggleExpand = (id: string) => {
    setExpandedPosts((prev) => ({ ...prev, [id]: !prev[id] }));
  };

  if (childItems.length === 0 || depth > maxDepth) return null;

  return (
    <div
      ref={depth === 0 ? containerRef : undefined}
      className={
        depth === 0
          ? childItems.length === 1
            ? 'flex justify-center space-y-6'
            : 'space-y-6'
          : 'ml-6 border-l-2 border-gray-200 pl-4 space-y-4'
      }
    >
      {childItems.map((contribution) => {
        const isAuthor = contribution.authorId === user?.id;
        const isCollaborator = contribution.collaborators?.some((c) => c.userId === user?.id);
        const isSystemGenerated = contribution.systemGenerated || contribution.autoGeneratedReason;

        let alignmentClass = 'mx-auto';
        if (isAuthor) alignmentClass = 'ml-auto';
        else if (isCollaborator) alignmentClass = 'mr-auto';
        else if (isSystemGenerated) alignmentClass = 'mx-auto';

        return (
          <div key={contribution.id} className={`${alignmentClass} max-w-2xl w-full`}>
            <div
              className="cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 rounded"
              onClick={() => toggleExpand(contribution.id)}
            >
              <ContributionCard
                contribution={contribution}
                user={user}
                onEdit={onEdit}
                onDelete={onDelete}
                questId={questId}
              />
            </div>

            {expandedPosts[contribution.id] && (
              <ThreadLayout
                contributions={contributions}
                parentId={contribution.id}
                user={user}
                onEdit={onEdit}
                onDelete={onDelete}
                depth={depth + 1}
                maxDepth={maxDepth}
                questId={questId}
                initialExpanded={initialExpanded}
              />
            )}
          </div>
        );
      })}
      {depth === 0 && loadingMore && <Spinner />}
    </div>
  );
};

export default ThreadLayout;
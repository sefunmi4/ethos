import { useCallback, useContext } from 'react';
import { TimelineContext } from '../contexts/TimelineContextBase';
import { addPost, fetchPostsByBoardId } from '../api/post';
import type { TimelineEvent } from '../types/postTypes';

/**
 * Hook providing convenient methods for working with user or board timelines.
 */
export const useTimeline = () => {
  const context = useContext(TimelineContext);

  if (!context) {
    throw new Error('useTimeline must be used within a TimelineProvider');
  }

  const { setTimelineEvents } = context;

  /**
   * Adds a new event to the timeline using a system-generated post.
   *
   * @param event - A timeline event object
   */
  const addTimelineEvent = useCallback(async (event: TimelineEvent) => {
    try {
      await addPost({
        authorId: event.userId,
        type: 'free_speech',
        content: event.content,
        visibility: 'private',
        tags: ['system'],
        collaborators: [],
        linkedItems: [],
        systemGenerated: true,
        autoGeneratedReason: event.type,
      });
    } catch (error) {
      console.error('[useTimeline] Failed to add timeline event:', error);
    }
  }, []);

  /**
   * Loads timeline events for a given board.
   *
   * @param boardId - ID of the board to load timeline for
   */
  const loadTimeline = useCallback(async (boardId: string, userId?: string) => {
    try {
      const posts = await fetchPostsByBoardId(boardId, userId);
      const timelineEvents: TimelineEvent[] = posts
        .filter(p => p.systemGenerated === true)
        .map(p => ({
          userId: p.authorId,
          type: p.autoGeneratedReason || 'system',
          content: p.content,
        }));
      setTimelineEvents(boardId, timelineEvents);
    } catch (error) {
      console.error('[useTimeline] Failed to load timeline for board:', error);
    }
  }, [setTimelineEvents]);

  return {
    addTimelineEvent,
    loadTimeline,
  };
};
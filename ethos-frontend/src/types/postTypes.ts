import type { Visibility, ItemType } from './common';

/**
 * Base post layout used across the platform.
 */
export interface Post {
  id: string;

  authorId: string;
  author?: {
    id: string;
    username?: string;
  };

  type: PostType;
  subtype?: string;
  /** Short header for the post */
  title?: string;
  content: string;
  /** Optional extra details for task posts */
  details?: string;
  visibility: Visibility;
  timestamp: string;
  createdAt?: string;

  questId?: string | null;
  questNodeTitle?: string;
  nodeId?: string;

  tags: PostTag[];
  status?: QuestTaskStatus;
  /** Optional classification for task posts */
  taskType?: 'file' | 'folder' | 'abstract';
  collaborators: CollaberatorRoles[];

  replyTo?: string | null;
  repostedFrom?: RepostMeta | null;
  linkedItems: LinkedItem[];

  reactions?: ReactionSet;
  reactionCounts?: ReactionCountMap;

  systemGenerated?: boolean;
  autoGeneratedReason?: string;

  enriched?: boolean;

  // üÜï Git metadata
  gitCommitSha?: string;
  gitFilePath?: string;
  gitDiff?: string;                // Optional: diff in unified format
  commitSummary?: string;         // short description for commit-type post
  linkedNodeId?: string;          // optional file/folder node reference

  /** Flag indicating this post is requesting help */
  helpRequest?: boolean;

  /** Whether this request still needs help */
  needsHelp?: boolean;
}

/**
 * Extended post format for rendering, editing, and UI previews.
 */
export interface EnrichedPost extends Post {
  enrichedCollaborators?: Array<{
    userId: string;
    username?: string;
    roles?: string[];
    avatarUrl?: string;
    bio?: string;
  }>;

  renderedContent?: string;

  mediaPreviews?: Array<{
    url: string;
    type: 'image' | 'video' | 'embed' | 'file';
    title?: string;
    thumbnail?: string;
  }>;

  quotedPost?: Post;
  originalEnrichedPost?: EnrichedPost;
}

/**
 * Users associated with a post.
 */
export interface CollaberatorRoles {
  userId: string;
  username?: string;
  roles?: string[];
}

/**
 * Repost metadata.
 */
export interface RepostMeta {
  originalPostId: string;
  username?: string;
  originalContent: string;
  originalTimestamp: string;
}

/**
 * Supported reaction types.
 */
export type ReactionType = 'like' | 'heart' | 'repost';

/**
 * Count of reactions by type.
 */
export type ReactionCountMap = Record<ReactionType, number>;

/**
 * Raw user reactions.
 */
export interface ReactionSet {
  like?: Record<string, string>;
  love?: Record<string, string>;
  repost?: Record<string, string>;
}

export interface LinkedItem {
  itemId: string;
  itemType: ItemType;
  nodeId?: string;
  title?: string;
  linkType?: LinkType;
  linkStatus?: LinkStatus;
  notifyOnChange?: boolean;     // Triggers alert if updated
  cascadeSolution?: boolean;   // Triggers downstream propagation
}

export type LinkType =
  | 'related'
  | 'solution'
  | 'duplicate'
  | 'quote'
  | 'reference'
  | 'task_edge';
export type LinkStatus = 'active' | 'solved' | 'private' | 'pending';

/**
 * Optional task progress label for posts in quest boards.
 */
export type QuestTaskStatus = 'To Do' | 'In Progress' | 'Blocked' | 'Done' | string;

/**
 * Supported types of posts used throughout the system.
 */
export type PostType =
  | 'free_speech'
  | 'request'
  | 'log'
  | 'quest_log'
  | 'task'
  | 'quest'
  | 'meta_system'
  | 'meta_announcement'
  | 'commit'
  | 'issue'
  | 'review'
  | 'solved';
  
/**
 * Supported tags for labeling and filtering posts.
 */
export type PostTag =
  | 'ai'
  | 'feedback'
  | 'story'
  | 'system'
  | 'bug'
  | 'progress'
  | 'event'
  | 'release'
  | 'repost'
  | 'quest'
  | 'task'
  | 'issue'
  | 'review'
  | string;


/**
 * Optional log event in user timeline (e.g., ‚Äúposted a quest‚Äù).
 */
export interface TimelineEvent {
  userId: string;
  type: string;
  content: string;
}
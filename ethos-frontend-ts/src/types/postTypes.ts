// types/postTypes.ts
import type { Visibility } from './common';

export type PostType =
  | 'free_speech'
  | 'request'
  | 'quest_log'
  | 'quest_task'
  | 'quest'
  | 'meta_system'       // ðŸ§  Internal system post
  | 'meta_announcement'; // ðŸ“£ Public system broadcast (e.g. platform changelog)

export type PostTag =
  | 'ai'
  | 'feedback'
  | 'story'
  | 'system'
  | 'bug'
  | 'progress'
  | 'event'
  | 'release'
  | 'repost'
  | string; // fallback for custom tags
  
  
export interface Post {
  id: string;

  /** User who created the post */
  authorId: string;

  /** Type of post used to infer layout, routing, and interaction */
  type: PostType;

  /** Markdown or plain text content */
  content: string;

  /** Visibility level, used for access and filtering */
  visibility: Visibility;

  /** Optional: The quest this post is linked to (as log or task) */
  questId?: string | null;

  /** Hashtags or topic tags */
  tags: PostTag[];

  /** Other users invited to collaborate on this post */
  collaborators: string[];

  /** If this post is a reply to another post */
  replyTo?: string | null;

  /** Timestamp in ISO format */
  timestamp: string;

  /** If this post is a repost of another post */
  repostedFrom?: RepostMeta | null;

  /** Items linked to this post (quests, posts, or boards) */
  linkedItems: LinkedItem[];

  /** Reactions grouped by type and userId */
  reactions?: ReactionSet;

  /** If auto-generated by the system */
  systemGenerated?: boolean;

  /** Reason or origin for auto-generation (e.g. 'linked_to_quest', 'repost', 'merge') */
  autoGeneratedReason?: string;
}

export interface LinkedItem {
  itemId: string;
  itemType: 'quest' | 'post' | 'board';
  nodeId?: string; // Quest-specific node context (e.g., for maps)
}

export interface RepostMeta {
  /** Post ID where this content originated */
  originalPostId: string;

  /** Username of the original author */
  username: string;

  /** Original content snapshot (immutable copy) */
  originalContent: string;

  /** Original timestamp for sorting and traceability */
  originalTimestamp: string;
}

export interface ReactionSet {
  like?: Record<string, string>;  // userId: timestamp
  love?: Record<string, string>;
  repost?: Record<string, string>;
}
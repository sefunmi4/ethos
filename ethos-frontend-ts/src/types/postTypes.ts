import type { Visibility, ItemType } from './common';

/**
 * Types of posts supported across the app.
 * Determines layout, routing, and system behavior.
 */
export type PostType =
  | 'free_speech'
  | 'request'
  | 'log'
  | 'task'
  | 'quest'
  | 'meta_system'       // ðŸ§  Internal system post
  | 'meta_announcement'; // ðŸ“£ Public system broadcast

/**
 * Tags used to describe and filter posts.
 */
export type PostTag =
  | 'ai'
  | 'feedback'
  | 'story'
  | 'system'
  | 'bug'
  | 'progress'
  | 'event'
  | 'release'
  | 'repost'
  | 'quest'              // ðŸ”– Indicates a quest-related post
  | string;              // fallback for custom tags

/**
 * Optional Kanban-style status used in quest tasks.
 * Posts with a `quest` tag + `status` are treated as actionable tasks.
 */
export type QuestTaskStatus = 'To Do' | 'In Progress' | 'Blocked' | 'Done' | string;

/**
 * Main post structure.
 * Posts may represent speech, requests, quest logs, or tasks.
 */
export interface Post {
  id: string;

  /** Author of the post */
  authorId: string;  
  author?: {
    id: string;
    username?: string;
  };

  /** Type of post, used for routing/layout */
  type: PostType;

  /** Markdown or plain text content */
  content: string;

  /** Who can view this post */
  visibility: Visibility;

  /** ISO timestamp */
  timestamp: string;

  /** Optional: Sortable ISO date */
  createdAt?: string;

  /** Optional: Quest context */
  questId?: string | null;
  questNodeTitle?: string;
  nodeId?: string;

  /** Hashtags and topic labels */
  tags: PostTag[];

  /** Optional: Kanban-style task status for quest posts */
  status?: QuestTaskStatus;

  /** Collaborators on the post */
  collaborators: CollaberatorRoles[];

  /** Reply chain support */
  replyTo?: string | null;

  /** If reposted, metadata about the original */
  repostedFrom?: RepostMeta | null;

  /** Links to other objects */
  linkedItems: LinkedItem[];

  /** Reaction summary */
  reactions?: ReactionSet;

  /** Count summary for quick UI rendering */
  reactionCounts?: ReactionCountMap;

  /** System-generated or auto-populated */
  systemGenerated?: boolean;
  autoGeneratedReason?: string;


  enriched?: boolean; // Optional: add a flag for enriched content
}

export type ReactionType = 'like' | 'heart' | 'repost';

/** Reaction count summary by type */
export type ReactionCountMap = Record<ReactionType, number>;
/**
 * If a post links to another quest/post/board.
 */
export interface CollaberatorRoles {
  //TODO:
  userId:string;
  username: string | undefined;
  roles?:string[];
}

/**
 * If a post links to another quest/post/board.
 */
export interface LinkedItem {
  itemId: string;
  itemType: ItemType;
  nodeId?: string;
  title?: string;
}

/**
 * Metadata when reposting another post.
 */
export interface RepostMeta {
  originalPostId: string;
  username: string | undefined;
  originalContent: string; 
  originalTimestamp: string;
}

/**
 * Map of user reactions by type.
 */
export interface ReactionSet {
  like?: Record<string, string>;
  love?: Record<string, string>;
  repost?: Record<string, string>;
}

/**
 * Extended post type with enriched metadata for rendering
 */
export interface EnrichedPost extends Post {
  /** Embedded user info or extra metadata for collaborators */
  enrichedCollaborators?: Array<{
    userId: string;
    username?: string;
    roles?: string[];
    avatarUrl?: string;
    bio?: string;
  }>;

  /** Rendered markdown (HTML or React nodes if parsed client-side) */
  renderedContent?: string;

  /** Media metadata (if linked items include images or video) */
  mediaPreviews?: Array<{
    url: string;
    type: 'image' | 'video' | 'embed' | 'file';
    title?: string;
    thumbnail?: string;
  }>;

  /** Quotes, if parsed from markdown or reply chains */
  quotedPost?: Post;

  /** Original enriched post if this was a repost */
  originalEnrichedPost?: EnrichedPost;
}

/**
 * 
 */
export interface TimelineEvent {
  userId: string;
  type: string ;
  content: string; 
}
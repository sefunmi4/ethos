// src/utils/displayUtils.ts

import type { Post } from '../types/postTypes';

/**
 * Generates a display-friendly title for a post.
 *
 * This function is used in UI contexts like reordering lists or showing a summary view.
 * It handles both quest-linked and generic posts:
 *
 * - If the post is part of a quest (has `nodeId`), the format becomes:
 *     `QuestName:NodeId[:suffix]`
 *   - `QuestName` defaults to "Q" if not provided
 *   - A suffix like `:abcd` is appended if the post is a reply (based on the last 4 characters of its ID)
 *
 * - If not quest-linked, a content preview is generated by trimming the post content.
 *   - The preview is truncated to 50 characters followed by an ellipsis if necessary.
 *
 * @param post - A `Post` object with fields like `content`, `nodeId`, `questName`, and `replyTo`.
 * @returns A short string suitable for display as a title or label.
 */
export const getDisplayTitle = (post: Post): string => {
  // Quest-linked format
  if (post.nodeId) {
    const questName = post.questName?.trim() || 'Q'; // fallback quest name
    const suffix = post.replyTo ? `:${post.id.slice(-4)}` : ''; // distinguish replies
    return `${questName}:${post.nodeId}${suffix}`;
  }

  // Fallback: generate preview from raw content
  const content = post.content?.trim() || '';
  return content.length > 50 ? content.slice(0, 50) + 'â€¦' : content;
};
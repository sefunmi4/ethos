datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  username String?
  password String
  role     String?
  status   String?
  posts    Post[]
  quests   Quest[]
  boards   Board[]
  projects Project[]
  reviews  Review[]
  notifications Notification[]
  @@map("users")
}

model Post {
  id        String   @id @default(uuid())
  authorId  String
  type      String
  title     String?
  content   String
  details   String?
  visibility String?
  tags      String[] @default([])
  status    String?
  boardId   String?
  nodeId    String?
  timestamp DateTime?
  createdAt DateTime @default(now())

  author User @relation(fields: [authorId], references: [id])
  reviews Review[]
  headOfQuest Quest? @relation("QuestHeadPost")
  @@map("posts")
}

model Quest {
  id            String   @id @default(uuid())
  authorId      String
  title         String
  description   String?
  visibility    String
  approvalStatus String?
  status        String?
  projectId     String?
  headPostId    String? @unique
  linkedPosts   Json?
  collaborators Json?
  gitRepo       Json?
  createdAt     DateTime @default(now())
  tags          String[]
  displayOnBoard Boolean?
  defaultBoardId String?
  taskGraph     Json?
  helpRequest   Boolean?
  followers     String[]

  author  User    @relation(fields: [authorId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  headPost Post?   @relation("QuestHeadPost", fields: [headPostId], references: [id])
  boards   Board[]
  reviews  Review[]
  @@map("quests")
}

model Board {
  id          String  @id
  title       String
  description String?
  boardType   String
  layout      String
  items       Json
  filters     Json?
  featured    Boolean?
  defaultFor  String?
  createdAt   DateTime @default(now())
  category    String?
  userId      String
  questId     String?

  user  User  @relation(fields: [userId], references: [id])
  quest Quest? @relation(fields: [questId], references: [id])
  @@map("boards")
}

model Project {
  id          String   @id @default(uuid())
  authorId    String
  title       String
  description String?
  visibility  String
  status      String?
  tags        String[]
  createdAt   DateTime @default(now())
  questIds    String[]
  deliverables String[]
  mapEdges    Json?

  author User   @relation(fields: [authorId], references: [id])
  quests Quest[]
  @@map("projects")
}

model Review {
  id         String   @id @default(uuid())
  reviewerId String
  targetType String
  rating     Int
  visibility String
  status     String
  tags       String[]
  feedback   String?
  repoUrl    String?
  modelId    String?
  questId    String?
  postId     String?
  createdAt  DateTime @default(now())

  reviewer User  @relation(fields: [reviewerId], references: [id])
  quest    Quest? @relation(fields: [questId], references: [id])
  post     Post?  @relation(fields: [postId], references: [id])
  @@map("reviews")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  @@map("notifications")
}

model Reaction {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  type      String
  createdAt DateTime @default(now())

  @@unique([postId, userId, type])
  @@map("reactions")
}

model TaskJoinRequest {
  id            String   @id @default(uuid())
  taskId        String
  requesterId   String
  requestPostId String?
  status        String
  createdAt     DateTime @default(now())
  decidedAt     DateTime?
  decidedBy     String?
  meta          Json?

  @@map("task_join_requests")
}

// src/types/api.ts

// üîñ Basic Type Aliases
export type UUID = string;
export type Timestamp = string;

// üîí Access Control
export type Visibility = 'public' | 'private' | 'hidden' | 'system' | 'request_board';

export type UserRole = 'user' | 'admin' | 'moderator';

/**
 * Supported reaction types.
 */
export type ReactionType = 'like' | 'heart' | 'repost';

export type ApprovalStatus = 'approved' | 'flagged' | 'banned';

export type AppItem = Post | Quest | Board | RenderableItem;

/**
 * Count of reactions by type.
 */
export type ReactionCountMap = Record<ReactionType, number>;

//
// üß≠ BOARD
//
export type BoardLayout =
  | 'grid'
  | 'horizontal'
  | 'kanban'
  | 'graph'
  | 'graph-condensed';
  
/**
 * Supported tags for labeling and filtering posts.
 */
export type PostTag =
  | 'ai'
  | 'feedback'
  | 'story'
  | 'system'
  | 'bug'
  | 'progress'
  | 'event'
  | 'release'
  | 'repost'
  | 'quest'
  | 'task'
  | 'issue'
  | 'review'
  | string;

/**
 * Optional task progress label for posts in quest boards.
 */
export type QuestTaskStatus = 'To Do' | 'In Progress' | 'Blocked' | 'Done' | string;

export type PostType = 'free_speech'
  | 'request'
  | 'log'
  | 'quest_log'
  | 'task'
  | 'quest' 
  | 'meta_system' 
  | 'meta_announcement' 
  | 'commit' 
  | 'issue' 
  | 'solved';

export type LinkStatus = 'active' | 'solved' | 'private' | 'pending';

export type LinkType =
  | 'related'
  | 'solution'
  | 'duplicate'
  | 'quote'
  | 'reference'
  | 'task_edge';

export type ItemType = 'post' | 'quest' | 'board';

export type GitItemType = 'post' | 'quest';

/** Supported board categories used for grouping items like posts, quests, maps, or logs */
export type BoardType = 'post' | 'quest' | 'map' | 'log' | 'custom';


// from types/api.ts
export interface Post {
  id: string;
  authorId: string;
  author?: { id: string; username?: string }; // üîπ optional basic enrich

  type: PostType;
  subtype?: string;
  /** Short header for the post */
  title?: string;
  content: string;
  /** Optional extra details for task posts */
  details?: string;
  visibility: Visibility;
  timestamp: string;
  createdAt?: string;

  questId?: string | null;
  questNodeTitle?: string;
  nodeId?: string;

  tags: PostTag[];
  status?: QuestTaskStatus;
  /** Optional classification for task posts */
  taskType?: 'file' | 'folder' | 'abstract';
  collaborators: CollaberatorRoles[];

  replyTo?: string | null;
  repostedFrom?: RepostMeta | null;
  linkedItems: LinkedItem[];

  reactionCounts?: ReactionCountMap;
  reactions?: ReactionSet;

  systemGenerated?: boolean;
  autoGeneratedReason?: string;

  linkedNodeId?: string;
  gitDiff?: string;
  commitSummary?: string;

  enriched?: boolean;

  /** Flag indicating this post is requesting help */
  helpRequest?: boolean;

  /** Whether this request still needs help */
  needsHelp?: boolean;

  /** UI hint used when a post is part of a highlighted task path */
  highlight?: boolean;
}


/**
 * Raw user reactions.
 */
export interface ReactionSet {
  like?: Record<string, string>;
  love?: Record<string, string>;
  repost?: Record<string, string>;
}

/**
 * Repost metadata.
 */
export interface RepostMeta {
  originalPostId: string;
  username?: string;
  originalContent: string;
  originalTimestamp: string;
}


// types/api.ts
export interface Quest {
  id: string;
  title: string;
  description?: string;
  authorId: string;
  visibility: Visibility;
  approvalStatus: ApprovalStatus;
  flagCount?: number;
  status: 'active' | 'completed' | 'archived';

  headPostId: string;
  createdAt?: string;

  linkedPosts: LinkedItem[];
  collaborators: CollaberatorRoles[];
  gitRepo?: {
    repoId: string;
    repoUrl: string;
    headCommitId?: string;
    defaultBranch?: string;
  };

  tags?: string[];
  /** When true this quest appears on the Quest Board */
  displayOnBoard?: boolean;
  defaultBoardId?: string;
  /** Graph edges between tasks/logs */
  taskGraph?: TaskEdge[];

  /** Marks this quest as a request for help */
  helpRequest?: boolean;
}
/**
 * Users associated with a post.
 */
export interface CollaberatorRoles {
  /** Optional user id if this role is filled by a registered user */
  userId?: string;
  username?: string;
  /**
   * Roles requested or assigned. When `userId` is omitted this
   * represents an open role that any user may request to fill.
   */
  roles?: string[];
}

// types/api.ts
export interface Board {
  id: string;
  title: string;
  description?: string;
  boardType: BoardType;
  layout: BoardLayout;
  items: (string | null)[];
  filters?: Record<string, any>;
  featured?: boolean;
  defaultFor?: 'home' | 'profile' | 'quests';
  createdAt: string;
  category?: string;
  userId: string;
  questId?: string;
}

/**
 * Enriched board format used when fetching detailed items
 */
export interface BoardData extends Board {
  enrichedItems?: (Post | Quest | Board)[];
  questId?: string;
}

export interface BoardPermission {
  boardId: string;
  canView: boolean;
  canEdit?: boolean;
  roles?: string[];
}

export interface RenderableItem {
  id: string;
  type: ItemType;
  title?: string;
  content?: string;
  authorId?: string;
  tags?: string[];
  status?: string;
  enriched?: boolean;
  visibility?: Visibility;
}

export interface LinkedItem {
  itemId: string;
  itemType: ItemType;
  nodeId?: string;
  title?: string;
  linkType?: LinkType;
  linkStatus?: LinkStatus;
  notifyOnChange?: boolean;
  cascadeSolution?: boolean;
}

// üîç TaskEdge type to define sub-problem relationships in the graph
export interface TaskEdge {
  from: string; // Node ID
  to: string; // Node ID
  type?: 'sub_problem' | 'solution_branch' | 'folder_split'; // Describes edge purpose
  label?: string;
}

// types/api.ts

export interface GitCommit {
  id: string;
  message: string;
  timestamp: string;
  author: {
    id: string;
    username?: string;
    avatarUrl?: string;
  };

  files?: GitFile[];
  diff?: string;
  parentShas?: string[];
  tags?: string[];
  linkedItem?: GitLinkedItem;
  metadata?: GitMetaData;
}

export interface GitFileChange {
  fileId: string;
  type: 'add' | 'modify' | 'delete';
  diff?: string;
}

export interface GitFile {
  path: string;
  name: string;
  type: string;
  status: 'added' | 'modified' | 'deleted' | 'renamed' | 'unchanged';
  preview?: string;
  metadata?: GitMetaData;

  lastModifiedBy?: string;
  deleted?: boolean;
  linkedTo?: GitLinkedItem;

  oldPath?: string;
  additions?: number;
  deletions?: number;
  blobUrl?: string;
}

export interface GitMetaData {
  size?: number;           // Size in bytes
  linesChanged?: number;
  additions?: number;
  deletions?: number;
}

export interface GitFileNode {
  id: string;
  path: string;
  name: string;
  type: 'file' | 'dir';
  status: 'added' | 'modified' | 'deleted' | 'unchanged';
  children?: GitFileNode[];
  commitIds?: string[];
  linkedItem?: GitLinkedItem;
}

export interface GitRepo {
  id: string;
  repoUrl: string;
  defaultBranch: string;
  branches: string[];
  lastCommitSha: string;
  lastSync?: string;
  status: GitStatus;
  fileTree: GitFileNode[];
  commits: GitCommit[];
}

export interface GitRepoMeta {
  repoUrl?: string;
  connected?: boolean;
  lastSync?: string;
  branch?: string;
}

export interface GitStatus {
  branch?: string;
  ahead?: number;
  behind?: number;
  isDirty?: boolean;
  uncommittedChanges?: GitFile[];
}

export interface GitLinkedItem {
  itemId: string;
  itemType: GitItemType;
  nodeId?: string;
  label?: string;
}


export interface User {
  id: string;
  email: string;
  username: string;
  password: string;
  role: UserRole;

  name?: string;
  bio: string;
  avatarUrl?: string;
  tags: string[];
  location?: string;

  gitAccounts?: GitAccount[];

  links: {
    github?: string;
    linkedin?: string;
    twitter?: string;
    tiktok?: string;
    youtube?: string;
    website?: string;
    blog?: string;
    other?: string;
  };

  featuredPosts?: {
    title: string;
    url: string;
    type?: 'github' | 'tweet' | 'blog' | 'quest' | 'video';
    tags?: string[];
  }[];

  experienceTimeline: UserExperienceEvent[];

  status?: 'active' | 'archived' | 'banned';
  createdAt?: string;
  updatedAt?: string;
}

export interface AuthUser extends Partial<Omit<User, 'role'>> {
  id: string;
  email: string;
  role?: UserRole;
  name?: string;
  [key: string]: any;
}

export interface UserExperienceEvent {
  datetime: string;
  title: string;
  tags?: string[];
}

export interface GitAccount {
  provider: 'github' | 'gitlab';
  username: string;
  tokenHash?: string;
  linkedRepoIds?: string[];
}

// --------------------------------------------
// Reviews
// --------------------------------------------

export type ReviewTargetType = 'ai_app' | 'quest' | 'creator' | 'dataset';

export interface Review {
  id: string;
  reviewerId: string;
  targetType: ReviewTargetType;
  rating: number; // 1-5
  tags?: string[];
  feedback?: string;

  // Link references
  repoUrl?: string;
  modelId?: string;
  questId?: string;
  postId?: string;

  createdAt: string;
}

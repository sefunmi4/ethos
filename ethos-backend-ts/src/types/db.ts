// types/db.ts
import type { 
  PostType,
  Visibility, 
  PostTag, 
  QuestTaskStatus, 
  LinkedItem, 
  GitStatus,
  GitLinkedItem,
  GitMetaData,
  UserRole,
  BoardLayout,
  BoardType
} from './api';

// types/db.ts
export interface DBPost {
  id: string;
  authorId: string;
  type: PostType;
  content: string;
  visibility: Visibility;
  timestamp: string;

  questId?: string | null;
  replyTo?: string | null;
  repostedFrom?: string | null;

  tags?: PostTag[];
  status?: QuestTaskStatus;
  collaborators?: { userId: string; roles?: string[] }[];
  linkedItems?: LinkedItem[];

  systemGenerated?: boolean;
  autoGeneratedReason?: string;

  linkedNodeId?: string;
  gitDiff?: string;
  commitSummary?: string;
}

// types/db.ts
export interface DBQuest {
  id: string;
  authorId: string;
  title: string;
  description?: string;
  status: 'active' | 'completed' | 'archived';

  headPostId: string;
  linkedPosts: LinkedItem[];
  collaborators: { userId: string; roles?: string[] }[];

  gitRepo?: {
    repoId: string;
    headCommitId?: string;
    defaultBranch?: string;
  };
  createdAt?: string;
  tags?: string[];
  defaultBoardId?: string;
}

// types/db.ts
export interface DBBoard {
  id: string;
  title: string;
  description?: string;
  layout: BoardLayout;
  items: (string | null)[];
  filters?: Record<string, any>;
  featured?: boolean;
  defaultFor?: 'home' | 'profile' | 'quests';
  createdAt: string;
  category?: string;
  userId: string;
}

// Efficient DB model for quick lookups and storage
export interface BoardDB {
  id: string;
  title: string;
  description?: string;
  type: BoardType;
  layout: BoardLayout;
  items: (string | null)[];
  filters?: Record<string, any>;
  featured?: boolean;
  defaultFor?: 'home' | 'profile' | 'quests';
  createdAt: string;
  userId: string;
  category?: string;
}


export interface DBGitRepo {
  repoUrl: string;
  defaultBranch: string;
  branches: string[];
  lastCommitSha: string;
  status: GitStatus;
  lastSync?: string;
  files?: DBGitFile;
}

export interface DBGitFile {
  path: string;
  name: string;
  type: string;
  status: string;
  linkedTo?: GitLinkedItem;
  commits?: DBGitCommit;
}

export interface DBGitCommit {
  id: string;
  message: string;
  authorId: string;
  timestamp: string;
  files: string[]; // array of file paths or file IDs
  parentShas?: string[];
  linkedItem?: GitLinkedItem;
  tags?: string[];
  metadata?: GitMetaData;
}

export interface DBUser {
  id: string;
  email: string;
  username: string;
  role: UserRole;

  name?: string;
  bio: string;
  avatarUrl?: string;
  tags: string[];
  location?: string;

  links?: Record<string, string>; // generic key-value links
  featuredPosts?: Array<{
    title: string;
    url: string;
    type?: string;
    tags?: string[];
  }>;

  experienceTimeline?: DBUserExperienceEvent[];

  status?: 'active' | 'archived' | 'banned';
  createdAt?: string;
  updatedAt?: string;
}

export interface DBUserExperienceEvent {
  datetime: string;
  title: string;
  tags?: string[];
}

/**
 * Represents the in-memory or file-backed structure of your JSON data store.
 * You can expand this to include reaction data, logs, etc.
 */
export interface DBSchema {
  boards: DBBoard[];
  git: DBGitRepo[];
  posts: DBPost[];
  quests: DBQuest[];
  users: DBUser[];
}

// Optional utility type for referencing a single entry type by file
export type DBFileName = keyof DBSchema; // 'boards' | 'git' | 'posts' | 'quests' | 'users'

/**
 * Generic type for file-based mock storage (can be used in utils/loaders.ts)
 */
export type DataStore<T> = {
  read: () => T;
  write: (data: T) => void;
  filepath?: string; // Optional path reference
};
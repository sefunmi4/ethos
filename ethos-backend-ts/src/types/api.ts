// src/types/api.ts

// ðŸ”– Basic Type Aliases
export type UUID = string;
export type Timestamp = string;

// ðŸ”’ Access Control
export type Visibility = 'public' | 'private' | 'hidden' | 'system';

export type UserRole = 'user' | 'admin' | 'moderator';

/**
 * Supported reaction types.
 */
export type ReactionType = 'like' | 'heart' | 'repost';

export type AppItem = Post | Quest | Board | RenderableItem;

/**
 * Count of reactions by type.
 */
export type ReactionCountMap = Record<ReactionType, number>;

//
// ðŸ§­ BOARD
//
export type BoardStructure = 'grid' | 'thread' | 'graph';
  
/**
 * Supported tags for labeling and filtering posts.
 */
export type PostTag =
  | 'ai'
  | 'feedback'
  | 'story'
  | 'system'
  | 'bug'
  | 'progress'
  | 'event'
  | 'release'
  | 'repost'
  | 'quest'
  | string;

/**
 * Optional task progress label for posts in quest boards.
 */
export type QuestTaskStatus = 'To Do' | 'In Progress' | 'Blocked' | 'Done' | string;

export type PostType = 'free_speech' 
  | 'request' 
  | 'log' 
  | 'task' 
  | 'quest' 
  | 'meta_system' 
  | 'meta_announcement' 
  | 'commit' 
  | 'issue' 
  | 'solved';

export type LinkStatus = 'active' | 'solved' | 'private' | 'pending';

export type LinkType = 'related' | 'solution' | 'duplicate' | 'quote' | 'reference';

export type ItemType = 'post' | 'quest' | 'board';

export type GitItemType = 'post' | 'quest';

/** Supported board categories used for grouping items like posts, quests, maps, or logs */
export type BoardType = 'post' | 'quest' | 'map' | 'log' | 'custom';


// from types/api.ts
export interface Post {
  id: string;
  authorId: string;
  author?: { id: string; username?: string }; // ðŸ”¹ optional basic enrich

  type: PostType;
  content: string;
  visibility: Visibility;
  timestamp: string;
  createdAt?: string;

  questId?: string | null;
  questNodeTitle?: string;
  nodeId?: string;

  tags: PostTag[];
  status?: QuestTaskStatus;
  collaborators: CollaberatorRoles[];

  replyTo?: string | null;
  repostedFrom?: RepostMeta | null;
  linkedItems: LinkedItem[];

  reactionCounts?: ReactionCountMap;
  reactions?: ReactionSet;

  systemGenerated?: boolean;
  autoGeneratedReason?: string;

  linkedNodeId?: string;
  gitDiff?: string;
  commitSummary?: string;

  enriched?: boolean;
}


/**
 * Raw user reactions.
 */
export interface ReactionSet {
  like?: Record<string, string>;
  love?: Record<string, string>;
  repost?: Record<string, string>;
}

/**
 * Repost metadata.
 */
export interface RepostMeta {
  originalPostId: string;
  username?: string;
  originalContent: string;
  originalTimestamp: string;
}


// types/api.ts
export interface Quest {
  id: string;
  authorId: string;
  title: string;
  description?: string;
  status: 'active' | 'completed' | 'archived';

  headPostId: string;
  linkedPosts: LinkedItem[];
  collaborators: CollaberatorRoles[];

  repoUrl?: string;
  createdAt?: string;
  ownerId?: string;
  tags?: string[];
}
/**
 * Users associated with a post.
 */
export interface CollaberatorRoles {
  userId: string;
  username?: string;
  roles?: string[];
}

// types/api.ts
export interface Board {
  id: string;
  title: string;
  description?: string;
  structure?: 'grid' | 'list' | 'graph' | 'thread';
  defaultFor?: string;
  createdAt?: string;

  items: string[]; // Still just IDs here
}

export interface RenderableItem {
  id: string;
  type: ItemType;
  title?: string;
  content?: string;
  authorId?: string;
  tags?: string[];
  status?: string;
  enriched?: boolean;
  visibility?: Visibility;
}

export interface LinkedItem {
  itemId: string;
  itemType: ItemType;
  nodeId?: string;
  title?: string;
  linkType?: LinkType;
  linkStatus?: LinkStatus;
  notifyOnChange?: boolean;
  cascadeSolution?: boolean;
}

// types/api.ts

export interface GitCommit {
  id: string;
  message: string;
  timestamp: string;
  author: {
    id: string;
    username?: string;
    avatarUrl?: string;
  };

  files?: GitFile[];
  diff?: string;
  parentShas?: string[];
  tags?: string[];
  linkedItem?: GitLinkedItem;
  metadata?: GitMetaData;
}

export interface GitFile {
  path: string;
  name: string;
  type: string;
  status: 'added' | 'modified' | 'deleted' | 'renamed' | 'unchanged';
  preview?: string;
  metadata?: GitMetaData;

  lastModifiedBy?: string;
  deleted?: boolean;
  linkedTo?: GitLinkedItem;

  oldPath?: string;
  additions?: number;
  deletions?: number;
  blobUrl?: string;
}

export interface GitMetaData {
  size?: number;           // Size in bytes
  linesChanged?: number;
  additions?: number;
  deletions?: number;
}

export interface GitRepoMeta {
  repoUrl?: string;
  connected?: boolean;
  lastSync?: string;
  branch?: string;
}

export interface GitStatus {
  ahead: number;
  behind: number;
  uncommittedChanges: GitFile[];
}

export interface GitLinkedItem {
  itemId: string;
  itemType: GitItemType;
  nodeId?: string;
  label?: string;
}


// types/api.ts

export interface User {
  id: string;
  email: string;
  username: string;
  role: UserRole;

  name?: string;
  bio: string;
  avatarUrl?: string;
  tags: string[];
  location?: string;

  links: {
    github?: string;
    linkedin?: string;
    twitter?: string;
    tiktok?: string;
    youtube?: string;
    website?: string;
    blog?: string;
    other?: string;
  };

  featuredPosts?: {
    title: string;
    url: string;
    type?: 'github' | 'tweet' | 'blog' | 'quest' | 'video';
    tags?: string[];
  }[];

  experienceTimeline: UserExperienceEvent[];

  status?: 'active' | 'archived' | 'banned';
  createdAt?: string;
  updatedAt?: string;
}

export interface AuthUser extends Partial<Omit<User, 'role'>> {
  id: string;
  email: string;
  role?: UserRole;
  name?: string;
  [key: string]: any;
}

export interface UserExperienceEvent {
  datetime: string;
  title: string;
  tags?: string[];
}
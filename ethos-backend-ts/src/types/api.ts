// src/types/api.ts

import { Request } from 'express';
import  { JwtPayload } from 'jsonwebtoken';

// üîñ Basic Type Aliases
export type UUID = string;
export type Timestamp = string;


// üîí Access Control
export type Visibility = 'public' | 'private' | 'unlisted';
export type UserRole = 'user' | 'admin';

// üß± Post Types
export type PostType =
  | 'free_speech'
  | 'request'
  | 'quest_log'
  | 'quest_task'
  | 'commit'
  | 'issue';

export type LinkType = 'quest' | 'post' | 'task' | 'log';

export type ReactionType = 'like' | 'dislike' | 'laugh' | 'fire';

//
// üßë USER
//
export interface User {
  id: UUID;
  username: string;
  email: string;
  password: string;
  role: UserRole;
  tags: string[];
  bio: string;
  links: {
    github?: string;
    linkedin?: string;
    tiktok?: string;
    website?: string;
    [key: string]: string | undefined;
  };
  experienceTimeline: {
    datetime: Timestamp;
    title: string;
    tags: string[];
  }[];
}

//
// üìù POST
//
export interface Post {
  id: string;

  authorId: string;
  author?: {
    id: string;
    username?: string;
  };

  type: PostType;
  content: string;
  visibility: Visibility;
  timestamp: string;
  createdAt?: string;

  questId?: string | null;
  questNodeTitle?: string;
  nodeId?: string;

  tags: PostTag[];
  status?: QuestTaskStatus;
  collaborators: CollaberatorRoles[];

  replyTo?: string | null;
  repostedFrom?: RepostMeta | null;
  linkedItems: LinkedItem[];

  reactions?: ReactionSet;
  reactionCounts?: ReactionCountMap;

  systemGenerated?: boolean;
  autoGeneratedReason?: string;

  enriched?: boolean;

  /** Commit-style enhancements */
  linkedNodeId?: string;         // link to file or code node
  gitDiff?: string;              // unified diff format (commit or patch)
  commitSummary?: string;        // short summary for commit-type posts
}

//
// üì¶ QUEST
//
export interface Quest {
  id: UUID;
  title: string;
  description?: string;
  ownerId: UUID;
  tags?: string[];
  collaborators?: UUID[];
  githubRepoUrl?: string;
  createdAt: Timestamp;
  updatedAt?: Timestamp;
}

//
// üß≠ BOARD
//
export type BoardStructure = 'grid' | 'thread' | 'graph';
export type ItemType = 'post' | 'quest';

export interface Board {
  id: UUID;
  title: string;
  description?: string;
  structure: BoardStructure;
  itemType: ItemType;
  filterTags?: string[];
  createdBy: UUID;
  createdAt: Timestamp;
  featured?: boolean;
  defaultFor?: string | null; // e.g., 'home', 'profile'
  items: UUID[];
}

//
// üí¨ REACTION
//
export interface Reaction {
  id: UUID;
  postId: UUID;
  userId: UUID;
  type: ReactionType;
  timestamp: Timestamp;
}

//
// üßµ THREAD
//
export interface Thread {
  id: UUID;
  rootPostId: UUID;
  postIds: UUID[];
}

//
// üß© ENRICHED BOARD DATA (for API response enrichment)
//
export interface BoardData extends Board {
  enrichedItems?: Array<Post | Quest>;
  questId?: UUID;
  userId?: UUID;
}


// Extend with generics for params, resBody, reqBody, and query
export interface AuthenticatedRequest<
  Params = any,
  ResBody = any,
  ReqBody = any,
  ReqQuery = any
> extends Request<Params, ResBody, ReqBody, ReqQuery> {
  user?: string | JwtPayload;
}